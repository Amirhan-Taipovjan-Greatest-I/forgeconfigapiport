plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.modrinth.minotaur" version "2.+"
	id 'io.github.juuxel.loom-quiltflower' version '1.7.2'
	id 'maven-publish'
	id 'signing'
	id 'java-library'
}

apply from: './gradle/tasks.gradle'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

ext.mcversion = "${minecraftVersion}"
ext.modversion = "${modVersion}"
version = "v${project.modversion}-${project.mcversion}-${project.projectLoader}"
group = "${modGroup}"
ext.modid = "${modId}"
ext.modauthor = "${modAuthor}"
ext.nextmcversion = getNextVersion("${minMinecraftVersion}")
ext.mainentrypoint = "${project.group}".concat(".${rootProject.name}")
ext.cliententrypoint = "${project.group}".concat(".client.${rootProject.name}Client")

repositories {
	maven { url = "https://maven.terraformersmc.com/releases/" }
	maven { url = "https://cursemaven.com" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraftVersion}"
	mappings loom.officialMojangMappings()

	// Fabric
	modImplementation "net.fabricmc:fabric-loader:${fabricVersion}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricApiVersion}"

	// Mod Menu
	modImplementation "com.terraformersmc:modmenu:4.0.6"

	// Configured
	modImplementation "curse.maven:configured-fabric-667378:4010582"

	// Config Dependencies
	implementation(include('com.electronwill.night-config:core:3.6.5'))
	implementation(include('com.electronwill.night-config:toml:3.6.5'))
}

loom {
	mixin {
		defaultRefmapName = "${modid}.refmap.json"
	}
}

processResources {
	duplicatesStrategy DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when the versions change.
    inputs.property "modId", 					project.modid
    inputs.property "modName", 					"${modName}"
    inputs.property "modVersion", 				project.modversion
    inputs.property "modGroup", 				project.group
    inputs.property "modPageUrl", 				"${modPageUrl}"
    inputs.property "modIssueUrl", 				"${modIssueUrl}"
	inputs.property "modSourceUrl", 			"${modSourceUrl}"
    inputs.property "modDescription", 			"${modDescription}"
    inputs.property "modAuthor", 				project.modauthor
    inputs.property "minFabricVersion", 		"${minFabricVersion}"
	inputs.property "minFabricApiVersion", 		"${minFabricApiVersion}"
    inputs.property "minMinecraftVersion", 		"${minMinecraftVersion}"
    inputs.property "nextMinecraftVersion", 	project.nextmcversion
    inputs.property "packFormat", 				"${packFormat}"
	inputs.property "mainEntryPoint", 			project.mainentrypoint
	inputs.property "clientEntryPoint", 		project.cliententrypoint

	filesMatching (['fabric.mod.json', 'publishing.fabric.mod.json']) {
        expand (
                'modId':                project.modid,
                'modName':              "${modName}",
                'modVersion':           project.modversion,
                'modGroup':             project.group,
                'modPageUrl':           "${modPageUrl}",
                'modIssueUrl':          "${modIssueUrl}",
				'modSourceUrl':         "${modSourceUrl}",
                'modAuthor':            project.modauthor,
				'modDescription':       "${modDescription}",
                'minFabricVersion':     "${minFabricVersion}",
				'minFabricApiVersion':  "${minFabricApiVersion}",
                'minMinecraftVersion':  "${minMinecraftVersion}",
                "nextMinecraftVersion": project.nextmcversion,
				"mainEntryPoint": 		project.mainentrypoint,
				"clientEntryPoint": 	project.cliententrypoint
        )
    }

	filesMatching ('pack.mcmeta') {
		expand (
				'modDescription':       "${modDescription}",
				"packFormat":           "${packFormat}"
		)
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

javadoc.options {
	encoding = "UTF-8"
	addStringOption('Xdoclint:none', '-quiet')
}

java {
	withSourcesJar()
	withJavadocJar()
}

ext.jarAttributes = [
		"Specification-Title"       : project.modid,
		"Specification-Version"     : project.modversion,
		"Specification-Vendor"      : project.modauthor.toLowerCase(),
		"Implementation-Title"      : project.modid,
		"Implementation-Version"    : project.modversion,
		"Implementation-Vendor"     : project.modauthor.toLowerCase(),
		"Implementation-Vendor-Id"  : project.group,
		"Implementation-URL"        : "${modPageUrl}",
		"Implementation-Timestamp"  : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
]

task publishingJar(type: Jar) {
	// needs a different identifier apparently, so use the one the remapping task renames the original jar to by default
	classifier 'dev'
	from sourceSets.main.output
	exclude 'fabric.mod.json'
	rename 'publishing.fabric.mod.json', 'fabric.mod.json'
}

task remapPublishingJar(type: net.fabricmc.loom.task.RemapJarTask) {
	inputFile.set publishingJar.archiveFile
	dependsOn publishingJar
}

tasks.withType(Jar).configureEach {
	from rootProject.file("LICENSE")
	from rootProject.file("LICENSE-FORGE")
	from rootProject.file("LICENSE-NIGHT-CONFIG")
	from rootProject.file("LICENSING.md")
	from rootProject.file("CHANGELOG.md")
	if (it != publishingJar)
	exclude 'publishing.fabric.mod.json'
	manifest { attributes(project.jarAttributes) }
	group 'jar'
}

tasks.withType(GenerateModuleMetadata) {
	// Disables Gradle's custom module metadata from being published to maven. The
	// metadata includes mapped dependencies which are not reasonably consumable by
	// other mod developers.
	enabled = false
}

publishing {
	publications {
		mavenJava (MavenPublication) {
			artifactId = "${modId}-fabric"
			version = modVersion
			// don't use this, it has the default jar, not sure how we could remove it
			// maybe as is done here for the sources jar: https://docs.gradle.org/current/userguide/publishing_customization.html
//			from components.java
			artifact remapPublishingJar
			artifact sourcesJar
			artifact javadocJar
			pom {
				name = "${modName} [Fabric]"
				description = "${modDescription}"
				url = "${modSourceUrl}"
				scm {
					url = "${modSourceUrl}"
					connection = "${modSourceUrl}".replace("https", "scm:git:git").concat(".git")
					developerConnection = "${modSourceUrl}".replace("https://github.com/", "scm:git:git@github.com:").concat(".git")
				}
				issueManagement {
					system = 'github'
					url = "${modIssueUrl}"
				}
				licenses {
					license {
						name = 'MPL-2'
						url = 'https://www.mozilla.org/en-US/MPL/2.0/'
					}
				}
				developers {
					developer {
						id = "${modAuthor}".toLowerCase()
						name = "${modAuthor}"
					}
				}
			}
			// this is necessary when not using 'from components.java', otherwise dependencies block will still be empty at this point
			afterEvaluate {
				// exclude certain dependencies when publishing to maven
				// from https://stackoverflow.com/a/50121790
				pom.withXml {
					asNode().dependencies.dependency.each { dep ->
						// use this approach to make excluding dependencies from Curse Maven more convenient
						if (["curse.maven:", "com.terraformersmc:modmenu"].stream().anyMatch(mod -> "${dep.groupId.last().value()}:${dep.artifactId.last().value()}".startsWith(mod))) {
							assert dep.parent().remove(dep)
						}
					}
				}
			}
		}
	}
	repositories {
		maven {
			name = 'FuzsModResources'
			url "file://" + project.hasProperty('modResources') ? "${project.findProperty('modResources')}/maven" : System.getenv('local_maven')
		}
	}
}

curseforge {
	if (!file('CHANGELOG.md').canRead()) { throw new FileNotFoundException("Could not read changelog file") }
	apiKey = project.findProperty('curseApiToken')
	project {
		id = projectCurseId
		changelogType = 'markdown'
		changelog = file('CHANGELOG.md')
		releaseType = projectReleaseType
		addGameVersion "Fabric"
		addGameVersion "Quilt"
		projectGameVersions.split(",").each {
			addGameVersion it.trim()
		}
		mainArtifact(remapJar) {
			displayName = "[${projectLoader.toUpperCase()}] [${minecraftVersion}] ${rootProject.name}-v${modVersion}"
			relations {
				requiredDependency 'fabric-api'
				optionalDependency 'modmenu'
				optionalDependency 'configured-fabric'
			}
		}
		addArtifact sourcesJar
	}
	options {
//        debug = true
		javaVersionAutoDetect = false
		forgeGradleIntegration = false
	}
}

modrinth {
	if (!file('CHANGELOG.md').canRead()) { throw new FileNotFoundException("Could not read changelog file") }
	token = project.findProperty('modrinthApiToken')
	projectId = projectModrinthId
	versionNumber = modVersion
	versionName = "[${projectLoader.toUpperCase()}] [${minecraftVersion}] ${rootProject.name}-v${modVersion}"
	changelog = file('CHANGELOG.md').text
	versionType = projectReleaseType
	uploadFile = remapJar // This is the java jar task
	projectGameVersions.split(",").each {
		gameVersions.add it.trim()
	}
	loaders.add "fabric"
	loaders.add "quilt"
	additionalFiles.add file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}-sources.jar")
	dependencies {
		required.project "fabric-api"
		optional.project "modmenu"
	}
//	debugMode = true
}

[tasks.modrinth, tasks.modrinthSyncBody].each {it.configure({
		group = 'upload'
	})
}

[tasks.modrinth, tasks.curseforge].each {it.dependsOn(build, remapJar)}

task copyJarToDir(type: Copy) {
	onlyIf { project.hasProperty('buildJarOutputDir') && project.hasProperty('uniqueBuildNumber') }
	if (project.findProperty('copyBuildJar').toBoolean()) {
		from remapJar
		into project.findProperty('buildJarOutputDir')
		// add build number to be able to distinguish jars when testing thorough official launcher
		// build number is stored in global gradle.properties
		rename { fileName -> fileName.replace("v${project.modversion}", "v${project.modversion}.${uniqueBuildNumber}") }
	}
}

task incrementBuildNumber {
	onlyIf { project.hasProperty('uniqueBuildNumber') }
	doLast {
		def propertiesName = 'gradle.properties'
		// build number is stored in global gradle.properties
		def propertiesFile = new File(project.gradle.gradleUserHomeDir, propertiesName)
		if (!propertiesFile.canRead()) { throw new FileNotFoundException("Could not read file ".concat(propertiesName)) }
		def buildNumberMatcher = Pattern.compile("uniqueBuildNumber=(\\d+)").matcher(propertiesFile.getText())
		buildNumberMatcher.find()
		def versionCode = Integer.parseInt(buildNumberMatcher.group(1))
		def propertiesContent = buildNumberMatcher.replaceAll("uniqueBuildNumber=" + ++versionCode)
		propertiesFile.write(propertiesContent)
	}
}


import groovy.json.*

import java.util.regex.Pattern

def static getNextVersion(String puzzlesVersion) {
	def puzzlesVersionMatcher = Pattern.compile("(\\d+\\.\\d+)").matcher(puzzlesVersion)
	puzzlesVersionMatcher.find()
	def currentVersion = puzzlesVersionMatcher.group(1)
	return currentVersion.substring(0, currentVersion.indexOf(".") + 1).concat(String.valueOf(Integer.parseInt(currentVersion.substring(currentVersion.indexOf(".") + 1, currentVersion.size())) + 1))
}

signing {
	sign publishing.publications.mavenJava
}

build.finalizedBy project.copyJarToDir, project.incrementBuildNumber
