plugins {
    id 'org.quiltmc.loom' version '1.0-SNAPSHOT'
}

archivesBaseName = rootProject.name
version = "v${modVersion}-${minecraftVersion}-Common"
group = modMavenGroup

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings loom.layered() {
        officialMojangMappings()
//        parchment("org.parchmentmc.data:parchment-${parchmentMinecraftVersion}:${parchmentMappingsVersion}@zip")
    }

    // Mixin Dependencies
    compileOnly 'org.ow2.asm:asm-tree:9.2'
    compileOnly 'org.ow2.asm:asm-commons:9.2'
    compileOnly 'org.ow2.asm:asm-util:9.2'
    compileOnly 'org.spongepowered:mixin:0.8.5'

    // Config Dependencies
    api 'com.electronwill.night-config:core:3.6.5'
    api 'com.electronwill.night-config:toml:3.6.5'

    // Puzzles Lib
//    modApi "fuzs.puzzleslib:puzzleslib-common:${puzzlesVersion}"
}

loom {
    mixin {
        // not sure if this is necessary for common...
        defaultRefmapName = "${modId}.refmap.json"
        // fix for java.lang.NoClassDefFoundError: org/objectweb/asm/tree/MethodNode
        useLegacyMixinAp = false
    }

    // this should hopeful prevent an empty run directory being generated in common during initial project setup
    runs {
        client {
            client()
            setConfigName("Common Client")
            ideConfigGenerated(false)
            runDir("../run")
        }
        server {
            server()
            setConfigName("Common Server")
            ideConfigGenerated(false)
            runDir("../run")
        }
    }
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when a value changes
    inputs.property "modId", "${modId}"
    inputs.property "modName", "${modName}"
    inputs.property "modVersion", "${modVersion}"
    inputs.property "modDescription", "${modDescription}"
    inputs.property "modGroup", project.group
    inputs.property "modPageUrl", "${modSourceUrl}"
    inputs.property "modIssueUrl", "${modIssueUrl}"
    inputs.property "modAuthor", "${modAuthor}"
    inputs.property "minQuiltVersion", "${minQuiltVersion}"
    inputs.property "minQSLVersion", "${minQSLVersion}"
    inputs.property "minecraftVersion", "${minecraftVersion}"
    inputs.property "minPuzzlesVersion", "${minPuzzlesVersion}"
    inputs.property "packFormat", "${packFormat}"
    inputs.property "mainEntryPoint", "${project.group}.${rootProject.name}Quilt"
    inputs.property "clientEntryPoint", "${project.group}.client.${rootProject.name}QuiltClient"
    inputs.property "modEnvironment", "${modEnvironment}"

    // replace stuff in quilt.mod.json and pack.mcmeta
    filesMatching(['quilt.mod.json', 'publishing.quilt.mod.json']) {
        expand(
                'modId': "${modId}",
                'modName': "${modName}",
                'modVersion': "${modVersion}",
                'modDescription': "${modDescription}",
                'modGroup': project.group,
                'modPageUrl': "${modSourceUrl}",
                'modIssueUrl': "${modIssueUrl}",
                'modAuthor': "${modAuthor}",
                'minQuiltVersion': "${minQuiltVersion}",
                'minQSLVersion': "${minQSLVersion}",
                'minecraftVersion': "${minecraftVersion}",
                "minPuzzlesVersion": "${minPuzzlesVersion}",
                "mainEntryPoint": "${project.group}.${rootProject.name}Quilt",
                "clientEntryPoint": "${project.group}.client.${rootProject.name}QuiltClient",
                "modEnvironment": "${modEnvironment}"
        )
    }

    filesMatching('pack.mcmeta') {
        expand(
                'modDescription': "${modDescription}",
                "packFormat": "${packFormat}"
        )
    }
}

publishing {
    publications {
        mavenJava (MavenPublication) {
            artifactId = "${modId}-common"
            version = modVersion
            from components.java
            pom {
                name = "${modName} [Common]"
                description = "${modDescription}"
                url = "${modSourceUrl}"
                scm {
                    url = "${modSourceUrl}"
                    connection = "${modSourceUrl}".replace("https", "scm:git:git").concat(".git")
                    developerConnection = "${modSourceUrl}".replace("https://github.com/", "scm:git:git@github.com:").concat(".git")
                }
                issueManagement {
                    system = 'github'
                    url = "${modIssueUrl}"
                }
                licenses {
                    license {
                        name = 'MPL-2.0'
                        url = 'https://www.mozilla.org/en-US/MPL/2.0/'
                    }
                }
                developers {
                    developer {
                        id = "${modAuthor}".toLowerCase()
                        name = "${modAuthor}"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'FuzsModResources'
            url "file://" + project.hasProperty('modResources') ? "${project.findProperty('modResources')}/maven" : System.getenv('local_maven')
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
